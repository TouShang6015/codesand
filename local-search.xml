<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Springboot集成OpenAi官方开源项目opanAI-Java</title>
    <link href="/2023/05/24/course/Springboot%E9%9B%86%E6%88%90opanAI-Java/"/>
    <url>/2023/05/24/course/Springboot%E9%9B%86%E6%88%90opanAI-Java/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要介绍Springboot集成openai-java完成openai官方接口的调用，官方有多种语言的<a href="https://platform.openai.com/docs/libraries/community-libraries">demo示例</a></p><p>OPENAI开源openai-java项目地址：<a href="https://github.com/TheoKanning/openai-java">https://github.com/TheoKanning/openai-java</a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>必要的前提，要使用chatgpt必须要魔法</p><ul><li>魔法</li><li>openai帐号（需要apiKey）</li><li>springboot+maven的项目</li></ul><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>1、maven中引入openai-java</p><blockquote><p>目前用的版本是0.12.0</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- openai --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.theokanning.openai-gpt3-java<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;openai.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.theokanning.openai-gpt3-java<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;openai.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.theokanning.openai-gpt3-java<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>service<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;openai.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>2、配置</p><p>测试我把配置信息放在了yml中</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">openai:</span><br>  <span class="hljs-attr">proxyHost:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>  <span class="hljs-attr">proxyPort:</span> <span class="hljs-number">7890</span><br>  <span class="hljs-attr">keys:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">sk-xxxxxxxxxxxxxxxxxxxxxxxx</span><br></code></pre></td></tr></table></figure><p>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;openai&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OpenAiModel</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代理地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String proxyHost;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代理端口</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Integer proxyPort;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * openai apikey</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;String&gt; keys;<br><br><span class="hljs-comment">// 省略 get set</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>3、使用</p><p>调用api的核心类是OpenAiService，不清楚是不是魔法的问题，我直接调用会ping不通，请求超时，必须设置代理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * openAiService 工厂</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> WuHao</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2023/5/24 10:00</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AiServiceFactory</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Duration</span> <span class="hljs-variable">DEFAULT_TIMEOUT</span> <span class="hljs-operator">=</span> Duration.ofSeconds(<span class="hljs-number">10L</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> OpenAiService <span class="hljs-title function_">createService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> Optional.ofNullable(OpenAiModel.getKeys()).orElseThrow(() -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;ApiKey不能为空，请检查参数配置&quot;</span>)).stream().findFirst().orElse(<span class="hljs-literal">null</span>);<br><br>        Assert.notEmpty(token,() -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;ApiKey不能为空，请检查参数配置&quot;</span>));<br><br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> OpenAiService.defaultObjectMapper();<br>        <span class="hljs-comment">// 设置代理</span><br>        <span class="hljs-type">Proxy</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(Proxy.Type.HTTP, <span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(OpenAiModel.getProxyHost(), OpenAiModel.getProxyPort()));<br>        <span class="hljs-type">OkHttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> OpenAiService.defaultClient(token, DEFAULT_TIMEOUT).newBuilder()<br>                .proxy(proxy)<br>                .build();<br>        <span class="hljs-type">Retrofit</span> <span class="hljs-variable">retrofit</span> <span class="hljs-operator">=</span> OpenAiService.defaultRetrofit(client, mapper);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OpenAiService</span>(retrofit.create(OpenAiApi.class), client.dispatcher().executorService());<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/testChat&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testChat</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException &#123;<br>        <span class="hljs-type">OpenAiService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> AiServiceFactory.createService();<br><br>        <span class="hljs-keyword">final</span> List&lt;ChatMessage&gt; messages = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ChatMessage</span> <span class="hljs-variable">systemMessage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChatMessage</span>(ChatMessageRole.SYSTEM.value(), URLDecoder.decode(<span class="hljs-string">&quot;取一个3个字的中文名字，要求姓氏为吴&quot;</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>));<br><br>        messages.add(systemMessage);<br>        <span class="hljs-type">ChatCompletionRequest</span> <span class="hljs-variable">chatCompletionRequest</span> <span class="hljs-operator">=</span> ChatCompletionRequest<br>                .builder()<br>                .model(<span class="hljs-string">&quot;gpt-3.5-turbo&quot;</span>)<br>                .messages(messages)<br>                .n(<span class="hljs-number">1</span>)<br>                .maxTokens(<span class="hljs-number">50</span>)<br>                .logitBias(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;())<br>                .build();<br><br>        service.streamChatCompletion(chatCompletionRequest)<br>                .doOnError(Throwable::printStackTrace)<br>                .blockingForEach(System.err::println);<br><br>        service.shutdownExecutor();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><p>输出结果</p><p><img src="http://static.hootin19.fun/articles/f36d70050382da31c19468c8b5cab75a.png" alt="图片.png"></p><p>流式输出的api可以与sse推送消息，后来写了一个测试页面，实现了打字机的效果，页面十分潦草，将就着看看…………</p><p><img src="http://static.hootin19.fun/articles/15d729bb3f91dbca8dbe7f643afb3546.png" alt="图片.png"></p><p>接口的其他使用方式可下载openai-java源码自行理解，目前我也在学习当中</p><h2 id="关于代理"><a href="#关于代理" class="headerlink" title="关于代理"></a>关于代理</h2><p>上述配置中代理指的是魔法的代理地址，先开启魔法</p><p>1、网络 -》 右键 属性</p><p><img src="http://static.hootin19.fun/articles/35583108d65ed85669fe78fa6bf75a26.png" alt="图片.png"></p><p>2、找到Internet选项</p><p><img src="http://static.hootin19.fun/articles/50e638f548c1c0ca8b3715ba95d033ab.png" alt="图片.png"></p><p>3、连接 -》 局域网设置</p><p>地址 对应的配置 proxyHost<br>端口 对应的配置 proxyPort</p><p><img src="http://static.hootin19.fun/articles/2cf034ce2b1f166918618ac9a08efec2.png" alt="图片.png"></p><h2 id="demo源码地址"><a href="#demo源码地址" class="headerlink" title="demo源码地址"></a>demo源码地址</h2><p><a href="https://gitee.com/toushang6015/wh-springboot-demo">gitee</a><br><a href="https://github.com/TouShang6015/wh-springboot-demo">github</a></p>]]></content>
    
    
    <categories>
      
      <category>ChatGPT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springBoot</tag>
      
      <tag>ChatGPT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java优雅的实现树形菜单、树形结构</title>
    <link href="/2023/04/23/course/Java%E4%BC%98%E9%9B%85%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%A0%91%E5%BD%A2%E8%8F%9C%E5%8D%95/"/>
    <url>/2023/04/23/course/Java%E4%BC%98%E9%9B%85%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%A0%91%E5%BD%A2%E8%8F%9C%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<h2 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h2><p>需要将集合转换为树形结构的集合，常见的有菜单树、部门树</p><h2 id="最后实现的效果"><a href="#最后实现的效果" class="headerlink" title="最后实现的效果"></a>最后实现的效果</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;MenuTreeVo&gt; builder = TreeBuilder.&lt;Menu, MenuTreeVo&gt;build(menus)<br>        .convert(MenuConvert.INSTANCE::convertTree)<br>        .builder();<br></code></pre></td></tr></table></figure><h2 id="前置知识点"><a href="#前置知识点" class="headerlink" title="前置知识点"></a>前置知识点</h2><blockquote><p>需要具备以下java知识可以轻松理解代码</p></blockquote><ul><li>建造者模式（最简单的就是lombok的@Builder注解）</li><li>java泛型的使用</li><li>函数式接口（这里只用到了Function）</li><li>递归调用</li><li>mapstruct框架的使用</li></ul><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><ul><li>一般来说，树形结构通常是给前端渲染的，必要的有4个字段<ul><li>主键、父级id、显示内容 还有一个子节点</li></ul></li><li>id、parentId、label、children</li></ul><h3 id="TreeModel-公共树实体"><a href="#TreeModel-公共树实体" class="headerlink" title="TreeModel 公共树实体"></a>TreeModel 公共树实体</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeModel</span>&lt;M&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 主键</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 父级id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Long parentId;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 显示内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String label;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 子节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> List&lt;M&gt; children;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里我们需要定一个泛型，业务场景不同的实体构建的树不同、参数不同</p></blockquote><h3 id="TreeBuilder-构建树结构类"><a href="#TreeBuilder-构建树结构类" class="headerlink" title="TreeBuilder 构建树结构类"></a>TreeBuilder 构建树结构类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeBuilder</span>&lt;Model, TM <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TreeModel</span>&lt;TM&gt;&gt; &#123;<br><br>    <span class="hljs-comment">// 假设我们是 menu 菜单实体，那需要转换成 MenuTreeVo  树实体VO类</span><br><br>    <span class="hljs-comment">// Model就是原始实体，TM是继承自TreeModel的实体类，如Menu 与 MenuTreeVo</span><br><br>    <span class="hljs-keyword">private</span> List&lt;Model&gt; modelList;<br><br>    <span class="hljs-keyword">private</span> List&lt;TM&gt; treeList;<br><br>    <span class="hljs-comment">// 步骤：</span><br>    <span class="hljs-comment">// 1. 构建 设置属性</span><br>    <span class="hljs-comment">// 2. 将model属性转换成TM</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;Model, TM <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TreeModel</span>&lt;TM&gt;&gt; TreeBuilder&lt;Model, TM&gt; <span class="hljs-title function_">build</span><span class="hljs-params">(List&lt;Model&gt; list)</span> &#123;<br>        TreeBuilder&lt;Model, TM&gt; builder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeBuilder</span>&lt;&gt;();<br>        builder.modelList = Optional.ofNullable(list).orElseGet(ArrayList::<span class="hljs-keyword">new</span>);<br>        <span class="hljs-keyword">return</span> builder;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 转换方法</span><br><span class="hljs-comment">     * &lt;p&gt;这个方法的意义&lt;/p&gt;</span><br><span class="hljs-comment">     * &lt;p&gt;* 我们可以动态的将实体，转换成我们需要的TreeMode实体类&lt;/p&gt;</span><br><span class="hljs-comment">     * &lt;p&gt;* 不同的类转换方式不同&lt;/p&gt;</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;比如菜单实体Menu，菜单名称这个字段是menuName&lt;/p&gt;</span><br><span class="hljs-comment">     * &lt;p&gt;部门实体，部门名称是deptName&lt;/p&gt;</span><br><span class="hljs-comment">     * &lt;p&gt;他们字段都不相同，我们可以在使用这个方法时灵活的赋值&lt;/p&gt;</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> convertFunction</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> TreeBuilder&lt;Model, TM&gt; <span class="hljs-title function_">convert</span><span class="hljs-params">(Function&lt;List&lt;Model&gt;, List&lt;TM&gt;&gt; convertFunction)</span> &#123;<br>        <span class="hljs-built_in">this</span>.treeList = convertFunction.apply(<span class="hljs-built_in">this</span>.modelList);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;TM&gt; <span class="hljs-title function_">builder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConvertUtil</span>&lt;TM&gt;(<span class="hljs-built_in">this</span>.treeList).convertTree();<br>    &#125;<br><br><br>    <span class="hljs-comment">/** </span><br><span class="hljs-comment">    * 树构建工具类</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@AllArgsConstructor</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConvertUtil</span>&lt;TM <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TreeModel</span>&lt;TM&gt;&gt; &#123;<br><br>        <span class="hljs-keyword">private</span> List&lt;TM&gt; treeList;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 核心方法</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> List&lt;TM&gt; <span class="hljs-title function_">convertTree</span><span class="hljs-params">()</span> &#123;<br>            List&lt;Long&gt; allIdList = <span class="hljs-built_in">this</span>.treeList.stream().map(TreeModel::getId).distinct().collect(Collectors.toList());<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.treeList.stream()<br>       <span class="hljs-comment">// 这个filter是过滤出顶级列表，也就是根节点的元素</span><br>                    .filter(model -&gt; !allIdList.contains(model.getParentId()))<br>    <span class="hljs-comment">// 为根节点元素，通过递归设置子节点</span><br>                    .peek(model -&gt; recursionList(<span class="hljs-built_in">this</span>.treeList, model))<br>                    .collect(Collectors.toList());<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 递归设置子节点</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> list</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> item</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">recursionList</span><span class="hljs-params">(List&lt;TM&gt; list, TM item)</span> &#123;<br><span class="hljs-comment">// 第一次进入，list为所有元素   item为顶级节点中的每一个元素</span><br>        <span class="hljs-comment">// 我们需要设置item中的children属性，为子节点赋值</span><br>        <span class="hljs-comment">// 根据item中的id，找到所有parentId与item的id对应的元素，parentId = id</span><br>            List&lt;TM&gt; childrenList = list.stream().filter(model -&gt; item.getId().equals(model.getParentId())).collect(Collectors.toList());<br>            item.setChildren(childrenList);<br>            <span class="hljs-keyword">for</span> (TM childrenItem : childrenList) &#123;<br>            <span class="hljs-comment">// 思考一下，最终停止的条件，是不是在元素中找不到对应的子节点，就不进行递归调用了</span><br>            <span class="hljs-comment">// 所以在调用前，判断一下 只有子节点数量大于0的时候，才会递归调用，否则方法就出去</span><br>                <span class="hljs-keyword">if</span> (list.stream().filter(one -&gt; one.getParentId().equals(childrenItem.getId())).count() &gt; <span class="hljs-number">0</span>) &#123;<br>                    recursionList(list, childrenItem);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="模拟实现菜单的树形构建"><a href="#模拟实现菜单的树形构建" class="headerlink" title="模拟实现菜单的树形构建"></a>模拟实现菜单的树形构建</h3><p>这里模拟实现菜单的树构建，肯定有一个bean对应的菜单表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Menu</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-keyword">private</span> Long parentId;<br><br>    <span class="hljs-keyword">private</span> String menuName;<br><br>    <span class="hljs-keyword">private</span> Integer sort;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Menu</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Menu</span><span class="hljs-params">(Long id, Long parentId, String menuName, Integer sort)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.parentId = parentId;<br>        <span class="hljs-built_in">this</span>.menuName = menuName;<br>        <span class="hljs-built_in">this</span>.sort = sort;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>为了构建树结构，我们需要给他添加一个children属性，原有的属性不需要改表，只需要继承TreeModel</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EqualsAndHashCode(callSuper = true)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MenuTreeVo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TreeModel</span>&lt;MenuTreeVo&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-keyword">private</span> Long parentId;<br><br>    <span class="hljs-keyword">private</span> String menuName;<br><br>    <span class="hljs-keyword">private</span> Integer sort;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>再结合mapstruct，让我们免去手动的set属性赋值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper(builder = @Builder(disableBuilder = true))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MenuConvert</span> &#123;<br><br>    <span class="hljs-type">MenuConvert</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> Mappers.getMapper(MenuConvert.class);<br><br>    <span class="hljs-meta">@Mappings(&#123;</span><br><span class="hljs-meta">            @Mapping(target = &quot;label&quot;, source = &quot;menuName&quot;),</span><br><span class="hljs-meta">    &#125;)</span><br>    MenuTreeVo <span class="hljs-title function_">convertTree</span><span class="hljs-params">(Menu param)</span>;<br><br>    List&lt;MenuTreeVo&gt; <span class="hljs-title function_">convertTree</span><span class="hljs-params">(List&lt;Menu&gt; param)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>准备工作都完成了，可以直接使用TreeBuilder</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Menu&gt; menus = CollUtil.newArrayList(<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Menu</span>(<span class="hljs-number">1L</span>, <span class="hljs-number">0L</span>, <span class="hljs-string">&quot;首页&quot;</span>, <span class="hljs-number">1</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Menu</span>(<span class="hljs-number">2L</span>, <span class="hljs-number">0L</span>, <span class="hljs-string">&quot;系统管理&quot;</span>, <span class="hljs-number">2</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Menu</span>(<span class="hljs-number">3L</span>, <span class="hljs-number">2L</span>, <span class="hljs-string">&quot;角色&quot;</span>, <span class="hljs-number">3</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Menu</span>(<span class="hljs-number">4L</span>, <span class="hljs-number">2L</span>, <span class="hljs-string">&quot;菜单&quot;</span>, <span class="hljs-number">4</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Menu</span>(<span class="hljs-number">5L</span>, <span class="hljs-number">0L</span>, <span class="hljs-string">&quot;用户管理&quot;</span>, <span class="hljs-number">5</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Menu</span>(<span class="hljs-number">6L</span>, <span class="hljs-number">5L</span>, <span class="hljs-string">&quot;系统用户&quot;</span>, <span class="hljs-number">6</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Menu</span>(<span class="hljs-number">7L</span>, <span class="hljs-number">5L</span>, <span class="hljs-string">&quot;普通用户&quot;</span>, <span class="hljs-number">7</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Menu</span>(<span class="hljs-number">8L</span>, <span class="hljs-number">6L</span>, <span class="hljs-string">&quot;管理员列表&quot;</span>, <span class="hljs-number">8</span>)<br>);<br><br>List&lt;MenuTreeVo&gt; builder = TreeBuilder.&lt;Menu, MenuTreeVo&gt;build(menus)<br>        .convert(MenuConvert.INSTANCE::convertTree)<br>        .builder();<br></code></pre></td></tr></table></figure><blockquote><p>实现效果</p></blockquote><p><img src="http://static.hootin19.fun/articles/8a7ddd82e812d80bf6927df73d67c587.png" alt="图片.png"></p><p>代码有需要的话我放在了git仓库嗷~：<a href="https://gitee.com/toushang6015/wh-springboot-demo">gitee地址</a><br><em>斜体</em></p>]]></content>
    
    
    <categories>
      
      <category>编程知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具类</tag>
      
      <tag>编程技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Controller封装基础的CRUD，简化单表业务</title>
    <link href="/2023/04/21/course/Controller%E5%B0%81%E8%A3%85%E5%9F%BA%E7%A1%80%E7%9A%84CRUD/"/>
    <url>/2023/04/21/course/Controller%E5%B0%81%E8%A3%85%E5%9F%BA%E7%A1%80%E7%9A%84CRUD/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>工作过部分软件开发公司，大部分软件的开发步骤都是框架搭建后，配置代码生成器生成出controller、service、mapper，虽然大部分开源框架service与mapper都生成好了，但是controller中还遗留冗余代码，我的想法是能不能把基本的单表CRUD抽出来，提供一个公共的Controller控制器。<br>利用java语言的特性可以实现，也会存在一些问题。</p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><ul><li>创建父控制器BaseController</li><li>一个Model（表实体Model）对应一个service，service作为泛型为BaseController的属性</li><li>通过注入的方式注入service属性（表不可能重复，因此service不存在重复注入Spring容器）</li><li>提取增删改查Mapping</li></ul><p><strong>service接口需要提供通用增删改查接口，对持久层框架没有限制</strong></p><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><p>我是用的是mybatis-plus框架，service泛型需要继承自<code>IService</code>接口，这个接口是MybatisPlus提供的公共service层接口，基本的增删改查方法接口已经提供好了，需要传递一个<code>Model</code>泛型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseController</span>&lt;S <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;M&gt;, M&gt; &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">protected</span> S service;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>接着提取出公共的增删改查Mapping</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseController</span>&lt;S <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;M&gt;, M&gt; &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">protected</span> S service;<br><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@GetMapping(&quot;/baseQueryById/&#123;id&#125;&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(value = &quot;基础功能-通过ID查询单条记录&quot;, notes = &quot;基础功能-通过ID查询单条记录&quot;, httpMethod = &quot;GET&quot;, response = Result.class)</span><br>    <span class="hljs-meta">@ApiOperationSupport(order = 1)</span><br>    <span class="hljs-keyword">protected</span> Result <span class="hljs-title function_">baseQueryById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>        <span class="hljs-keyword">if</span> (ObjectUtil.isNull(id) || id &lt;= <span class="hljs-number">0L</span>) &#123;<br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;id不能为空！&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">M</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> service.getById(id);<br>        <span class="hljs-keyword">return</span> Result.success(m);<br>    &#125;<br><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@PostMapping(&quot;/baseQueryByParam&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(value = &quot;基础功能-条件查询&quot;, httpMethod = &quot;POST&quot;, response = Result.class)</span><br>    <span class="hljs-meta">@ApiOperationSupport(order = 2)</span><br>    <span class="hljs-keyword">protected</span> Result <span class="hljs-title function_">baseQueryByParam</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody(required = false)</span> M param)</span> &#123;<br>        <span class="hljs-keyword">if</span> (ObjectUtil.isNull(param)) &#123;<br>            param = service.modelInstance();<br>        &#125;<br>        List&lt;M&gt; list = service.listByParam(param);<br>        <span class="hljs-keyword">return</span> Result.success(list);<br>    &#125;<br><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@PostMapping(&quot;/baseQueryPageByParam&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(value = &quot;基础功能-条件查询分页&quot;, httpMethod = &quot;POST&quot;, response = Result.class)</span><br>    <span class="hljs-meta">@ApiOperationSupport(order = 3)</span><br>    <span class="hljs-keyword">protected</span> Result <span class="hljs-title function_">baseQueryPageByParam</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody(required = false)</span> M param)</span> &#123;<br>        <span class="hljs-keyword">if</span> (ObjectUtil.isNull(param)) &#123;<br>            param = service.modelInstance();<br>        &#125;<br>        IPage&lt;M&gt; page = PageUtil.pageBean(param);<br>        <span class="hljs-keyword">return</span> Result.success(service.listPageByParam(page, param));<br>    &#125;<br><br>    <span class="hljs-meta">@Log(title = &quot;基础新增&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@PostMapping(&quot;/baseAdd&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(value = &quot;基础功能-新增&quot;, httpMethod = &quot;POST&quot;, response = Result.class)</span><br>    <span class="hljs-meta">@ApiOperationSupport(order = 4)</span><br>    <span class="hljs-keyword">protected</span> &lt;DTO&gt; Result <span class="hljs-title function_">baseAdd</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> DTO m)</span> &#123;<br>        <span class="hljs-type">M</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> JSON.parseObject(JSON.toJSONString(m), service.getModelClass());<br>        <span class="hljs-keyword">if</span> (!service.save(param)) &#123;<br>            <span class="hljs-keyword">return</span> Result.fail(ResultEnum.FAIL_INSERT);<br>        &#125;<br>        <span class="hljs-keyword">return</span> Result.success(ResultEnum.SUCCESS_INSERT);<br>    &#125;<br><br>    <span class="hljs-meta">@Log(title = &quot;基础编辑&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@PutMapping(&quot;/baseEdit&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(value = &quot;基础功能-修改&quot;, httpMethod = &quot;PUT&quot;, response = Result.class)</span><br>    <span class="hljs-meta">@ApiOperationSupport(order = 5)</span><br>    <span class="hljs-keyword">protected</span> &lt;DTO&gt; Result <span class="hljs-title function_">baseEdit</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> <span class="hljs-meta">@Validated(value = &#123;Update.class&#125;)</span> DTO m)</span> &#123;<br>        <span class="hljs-type">M</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> JSON.parseObject(JSON.toJSONString(m), service.getModelClass());<br>        <span class="hljs-keyword">if</span> (!service.updateById(param)) &#123;<br>            <span class="hljs-keyword">return</span> Result.fail(ResultEnum.FAIL_UPDATE);<br>        &#125;<br>        <span class="hljs-keyword">return</span> Result.success(ResultEnum.SUCCESS_UPDATE);<br>    &#125;<br><br>    <span class="hljs-meta">@Log(title = &quot;基础删除&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/baseDeleteByIds/&#123;ids&#125;&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(value = &quot;基础功能-根据主键id删除(多个id根据,分隔)&quot;, httpMethod = &quot;DELETE&quot;, response = Result.class)</span><br>    <span class="hljs-meta">@ApiOperationSupport(order = 6)</span><br>    <span class="hljs-keyword">protected</span> Result <span class="hljs-title function_">baseDeleteByIds</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;ids&quot;)</span> String ids)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StrUtil.isEmpty(ids)) &#123;<br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;删除条件id不能为空&quot;</span>);<br>        &#125;<br>        String[] idsArr = ids.split(StringPool.COMMA);<br>        <span class="hljs-keyword">if</span> (idsArr.length &gt; <span class="hljs-number">1000</span>) &#123;<br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;不能批量删除超过1000个数据&quot;</span>);<br>        &#125;<br>        List&lt;Long&gt; idList = StringUtils.splitToList(ids, Long::valueOf);<br>        <span class="hljs-keyword">if</span> (service.removeByIds(idList)) &#123;<br>            <span class="hljs-keyword">return</span> Result.success(ResultEnum.SUCCESS_DELETE);<br>        &#125;<br>        <span class="hljs-keyword">return</span> Result.success(ResultEnum.FAIL_DELETE);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>其中<code>Result</code>为公共的返回实体，<code>Log</code>是我在项目中封装的日志注解，还用到了SwaggerUi接口文档框架</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>1、引入swaggerUi后，接口文档的请求参数不能友好的定制化设置，如下图</p><p><img src="http://static.hootin19.fun/articles/01dd3b5c7477290d6e593a3982f95f09.png" alt="图片.png"></p><blockquote><p>参数因为是泛型，不好定制化处理，必须重写BaseController的方法，然后重新再方法中添加swaggerUI注解</p></blockquote><p>2、如果需要扩展参数进行crud，必须重写父类BaseController中的方法，并且如果是扩展类型（DTO,VO）需要进行一次转换，不过这种转换的效率应该可以忽略不计</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 项目中的代码片段</span><br><span class="hljs-meta">@Log(title = &quot;字典类型新增&quot;)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> &lt;DTO&gt; Result <span class="hljs-title function_">baseAdd</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> DTO m)</span> &#123;<br>    <span class="hljs-type">BaseDictTypeModel</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> MapperUtil.convert(m, BaseDictTypeModel.class);<br>    <span class="hljs-keyword">return</span> Result.successBoolean(service.insertByParam(param));<br>&#125;<br></code></pre></td></tr></table></figure><p>重写注意要添加@RequestBody注解</p><blockquote><p>总结</p></blockquote><p>实际开发过程中并没有想象中的那么简化代码，但是提供了一个规则，使代码编写思路变的清晰，也减少了单表业务的代码量</p><p><em>项目的源码地址：</em><br><a href="https://gitee.com/toushang6015/spring-boot-bebas-server">gitee源码地址</a><br><a href="https://github.com/TouShang6015/spring-boot-bebas-server">github源码地址</a></p>]]></content>
    
    
    <categories>
      
      <category>编程知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小Tips-枚举Enum的进阶用法</title>
    <link href="/2023/04/21/course/%E6%9E%9A%E4%B8%BEEnum%E7%9A%84%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95/"/>
    <url>/2023/04/21/course/%E6%9E%9A%E4%B8%BEEnum%E7%9A%84%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>枚举的基础使用不需要多说，本篇讲述的是进阶使用。</p><p>对于枚举的定义，类似接口但是有自己的构造方法，枚举不可以使用extends继承关键字，但是可以实现接口，特点描述如下</p><ul><li>枚举不可以继承</li><li>可以实现接口</li><li>可以有抽象方法</li></ul><h2 id="2、枚举与字典"><a href="#2、枚举与字典" class="headerlink" title="2、枚举与字典"></a>2、枚举与字典</h2><p><strong>字典：通常用于维护可变少，无流程的常量，存储在数据库中</strong></p><ul><li>一般用于存储如性别、是否、开关等</li></ul><p><strong>枚举：不可变常量，每一种状态可能都会影响到流程，存储在java代码中</strong></p><ul><li>如订单的状态，使用的是枚举存储</li></ul><h2 id="3、枚举-接口与lombok的结合使用"><a href="#3、枚举-接口与lombok的结合使用" class="headerlink" title="3、枚举-接口与lombok的结合使用"></a>3、枚举-接口与lombok的结合使用</h2><p>lombok的@Getter注解简化了属性的get()方法，interface定义get方法的规则<br>因此需要统一枚举的属性，定义枚举需要实现的公共接口</p><h3 id="定义接口-FlowBaseEnum-class"><a href="#定义接口-FlowBaseEnum-class" class="headerlink" title="定义接口 FlowBaseEnum.class"></a>定义接口 FlowBaseEnum.class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">FlowBaseEnum</span> &#123;<br><br>    String <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span>;<br><br>    String <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 设备绑定状态枚举</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wuhao</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/11/1 15:25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">DeviceBindStatus</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FlowBaseEnum</span> &#123;<br><br>    LOCKED(<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;锁定&quot;</span>),<br><br>    UNLOCKED(<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;未锁定&quot;</span>),<br>    ;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String key;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String value;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>上述枚举 属性 <code>key</code> <code>value</code>为固定字段，接口方法为属性的get方法</p><h2 id="4、接口的作用"><a href="#4、接口的作用" class="headerlink" title="4、接口的作用"></a>4、接口的作用</h2><p>单个枚举的使用看不出接口的效果，对于接口的定义，<code>通过接口来统一的管理流程类枚举</code></p><blockquote><p>应用场景：设备绑定状态下拉框数据</p></blockquote><p><strong>定义流程枚举工具类：FlowEnumUtils</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wuhao</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/11/4 16:34</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FlowEnumUtils</span> &#123;<br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取枚举下拉</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cls 枚举class类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FlowBaseEnum</span>&gt; List&lt;OptionLabel&lt;String, String&gt;&gt; <span class="hljs-title function_">getOptionList</span><span class="hljs-params">(Class&lt;T&gt; cls)</span> &#123;<br>        Assert.notNull(cls);<br>        T[] constants = cls.getEnumConstants();<br>        <span class="hljs-keyword">return</span> Arrays.stream(constants).map(t -&gt; &#123;<br>            OptionLabel&lt;String, String&gt; optionLabel = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OptionLabel</span>&lt;&gt;();<br>            optionLabel.setLabel(t.getValue());<br>            optionLabel.setValue(t.getKey());<br>            <span class="hljs-keyword">return</span> optionLabel;<br>        &#125;).collect(Collectors.toList());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>OptionLabel</code>为通用的下拉实体，只有label与value两个属性</p><p><strong>这个方法可以看出来为什么要定义接口了吧</strong></p><p>使用泛型，<code>T</code>的类型为<code>FlowBaseEnum</code>接口的实现类，当然<strong>实现类必须为枚举</strong>，不然cls.getEnumConstants()会报错，通过getEnumConstants()方法获取枚举数组，返回的就是枚举中所有的构造方法，通过接口定义的getKey()与getValue()获取key value封装成下拉实体。</p><p><strong>因此定义接口是为了统一维护枚举，并加以扩展定制化</strong></p><h2 id="5、枚举的分组"><a href="#5、枚举的分组" class="headerlink" title="5、枚举的分组"></a>5、枚举的分组</h2><p><strong>场景：不同订单类型下，订单中的数据类型不相同。</strong><br>如订单类型分为</p><ul><li>修复类型订单</li><li>种植类型订单</li><li>正畸类型订单</li></ul><p>每个类型中所对应的数据是不相同的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** </span><br><span class="hljs-comment"> * 订单数据类型接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wuhao</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/11/1 18:12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IOrderDataTypes</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修复类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Getter</span><br>    <span class="hljs-meta">@AllArgsConstructor</span><br>    <span class="hljs-keyword">enum</span> <span class="hljs-title class_">REPAIR</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IOrderDataTypes</span> &#123;<br>        DATA_INTACT(<span class="hljs-string">&quot;数据完整性&quot;</span>),<br>        MARGIN(<span class="hljs-string">&quot;边缘&quot;</span>),<br>        RECESSED_AND_POSITION_PATH(<span class="hljs-string">&quot;倒凹&amp;就位道&quot;</span>),<br>        ;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String description;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 种植类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Getter</span><br>    <span class="hljs-meta">@AllArgsConstructor</span><br>    <span class="hljs-keyword">enum</span> <span class="hljs-title class_">PLANT</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IOrderDataTypes</span> &#123;<br>        DATA_INTACT(<span class="hljs-string">&quot;数据完整性&quot;</span>),<br>        PLANTING_SCANNING_ROD(<span class="hljs-string">&quot;种植扫描杆&quot;</span>),<br>        ;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String description;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 正畸类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Getter</span><br>    <span class="hljs-meta">@AllArgsConstructor</span><br>    <span class="hljs-keyword">enum</span> <span class="hljs-title class_">ORTHODONTICS</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IOrderDataTypes</span> &#123;<br>        DATA_INTACT(<span class="hljs-string">&quot;数据完整性&quot;</span>),<br>        BITE_THE_JAW(<span class="hljs-string">&quot;咬颌&quot;</span>),<br>        ;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String description;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>接口中可定义多个枚举类，这里接口的作用仅仅是做一个分组的作用</strong></p><h2 id="6、枚举中的一对多分组"><a href="#6、枚举中的一对多分组" class="headerlink" title="6、枚举中的一对多分组"></a>6、枚举中的一对多分组</h2><p>这里结合的是上面两种方式的一个进阶，相当于对枚举分组的一个实现，使用场景：<br><strong>每个订单类型下，对应多个不同的数据类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 订单数据类型</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wyj</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/11/1 17:46</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">OrderDataType</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FlowBaseEnum</span> &#123;<br><br>    REPAIR(<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;牙齿修复&quot;</span>)&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> List&lt;IOrderDataTypes.REPAIR&gt; getOrderTypes() &#123;<br>            <span class="hljs-keyword">return</span> Arrays.stream(IOrderDataTypes.REPAIR.values()).collect(Collectors.toList());<br>        &#125;<br>    &#125;,<br><br>    PLANT(<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;牙齿种植&quot;</span>)&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> List&lt;IOrderDataTypes.PLANT&gt; getOrderTypes() &#123;<br>            <span class="hljs-keyword">return</span> Arrays.stream(IOrderDataTypes.PLANT.values()).collect(Collectors.toList());<br>        &#125;<br>    &#125;,<br><br>    ORTHODONTICS(<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;牙齿正畸&quot;</span>)&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> List&lt;IOrderDataTypes.ORTHODONTICS&gt; getOrderTypes() &#123;<br>            <span class="hljs-keyword">return</span> Arrays.stream(IOrderDataTypes.ORTHODONTICS.values()).collect(Collectors.toList());<br>        &#125;<br>    &#125;,<br><br>    ;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String key;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String value;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取类型中的详细类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IOrderDataTypes</span>&gt; List&lt;T&gt; <span class="hljs-title function_">getOrderTypes</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里<code>OrderDataType</code>枚举中定义了3中订单类型，而如果需要实现每种类型对应多个数据类型，则需要定义一个抽象方法，返回的是数据类型列表，方法的返回值数据类型则是<code>IOrderDataTypes</code>的实现类。在上面<code>枚举的分组</code>中已经定义了一个<code>IOrderDataTypes</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 要获取某一个类型中的数据类型列表</span><br><span class="hljs-comment">// 获取牙齿正畸订单数据类型列表标识</span><br>List&lt;IOrderDataTypes&gt; orderTypes = OrderDataType.ORTHODONTICS.getOrderTypes();<br>orderTypes.forEach(System.out::println);<br></code></pre></td></tr></table></figure><p><img src="http://static.hootin19.fun/articles/f13ccfac2c3619da19e0eb82c6e52321.png" alt="图片.png"></p><p><strong>可以把枚举定义成接口，枚举中定义的值为接口的实现类，枚举中只能定义抽象方法，不能定义普通方法，而实现类中必须实现抽象方法</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>了解枚举与字典的使用场景，可以是开发变的更高效，以前使用字典维护项目中的流程状态，开发起来很繁琐，因此关于流程的状态个人觉得不太适合使用字典维护。</p><blockquote><p>灵感来自书籍《On Java 8 进阶版》</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>编程知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springBoot</tag>
      
      <tag>编程技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CompletableFuture超时处理 配置线程池</title>
    <link href="/2023/04/21/course/CompletableFuture%E8%B6%85%E6%97%B6%E5%A4%84%E7%90%86/"/>
    <url>/2023/04/21/course/CompletableFuture%E8%B6%85%E6%97%B6%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h1><ul><li>简介</li><li>使用方法</li><li>代码</li></ul><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>&amp;emsp;&amp;emsp;项目中一个统计的业务场景，使用原生的CompletableFuture异步多个任务查询mysql数据，少量请求无问题，但是测试过程中大量请求进来，线程没有设置超时时间，导致大量线程处于等待状态，接口响应缓慢。<br>&amp;emsp;&amp;emsp;因此需要在原生的CompletableFuture中封装，使用自定义线程池、设置超时时间保证接口稳定性。</p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>&amp;emsp;&amp;emsp;工具类中主要封装了 supplyAsync()、runAsync()、allOf()这三个方法，目前我的项目中业务场景这三个方法比较常用。<br>&amp;emsp;&amp;emsp;将工具类引入项目中，CompletableFuture.supplyAsync() 可直接替换为FutureUtil.supplyAsync()，其他方法同理，替换类名即可，示例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 有返回值的异步任务</span><br>FutureUtil.supplyAsync(() -&gt; &#123;<br><span class="hljs-comment">// 逻辑代码</span><br>&#125;)<br><br><span class="hljs-comment">// 无返回值的异步任务</span><br>FutureUtil.runAsync(() -&gt; &#123;<br><span class="hljs-comment">// 逻辑代码</span><br>&#125;)<br><br><span class="hljs-comment">// 统一等待异步任务执行完成</span><br>FutureUtil.allOf(() -&gt; &#123;<br><span class="hljs-comment">// 逻辑代码</span><br>&#125;)<br><br></code></pre></td></tr></table></figure><p>默认超时时间为可在工具类中设置，可手动设置超时时间，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 前两个参数分别为 超时时间、时间单位</span><br>FutureUtil.allOf(<span class="hljs-number">1000</span>, TimeUnit.MILLISECONDS,() -&gt; &#123; <span class="hljs-comment">// 异步任务 &#125;);</span><br><br>FutureUtil.runAsync(<span class="hljs-number">1000</span>, TimeUnit.MILLISECONDS,() -&gt; &#123; <span class="hljs-comment">// 逻辑代码 &#125;);</span><br>FutureUtil.supplyAsync(<span class="hljs-number">1000</span>, TimeUnit.MILLISECONDS,() -&gt; &#123; <span class="hljs-comment">// 逻辑代码 &#125;);</span><br><br></code></pre></td></tr></table></figure><p>详细使用可自行查看工具类中源码，代码贴下面了👇👇👇</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><span class="hljs-keyword">import</span> java.util.function.Function;<br><span class="hljs-keyword">import</span> java.util.function.Supplier;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 多任务处理工具类</span><br><span class="hljs-comment">* <span class="hljs-doctag">@Author</span> WhHao</span><br><span class="hljs-comment">* <span class="hljs-doctag">@Date</span> 2022/8/10 16:04</span><br><span class="hljs-comment">* <span class="hljs-doctag">@Return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FutureUtil</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * cpu 核心数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">AVALIABLE_PROCESSORS</span> <span class="hljs-operator">=</span> Runtime.getRuntime().availableProcessors();<br><br>    <span class="hljs-comment">// 最大超时时间</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TIMEOUT_VALUE</span> <span class="hljs-operator">=</span> <span class="hljs-number">1500</span>;<br>    <span class="hljs-comment">// 时间单位</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">TimeUnit</span> <span class="hljs-variable">TIMEOUT_UNIT</span> <span class="hljs-operator">=</span> TimeUnit.MILLISECONDS;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Singleton delay scheduler, used only for starting and * cancelling tasks.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Delayer</span> &#123;<br><br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ScheduledThreadPoolExecutor delayer;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 异常线程，不做请求处理，只抛出异常</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">static</span> &#123;<br>            delayer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScheduledThreadPoolExecutor</span>(<span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DaemonThreadFactory</span>());<br>            delayer.setRemoveOnCancelPolicy(<span class="hljs-literal">true</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">static</span> ScheduledFuture&lt;?&gt; delay(Runnable command, <span class="hljs-type">long</span> delay, TimeUnit unit) &#123;<br>            <span class="hljs-keyword">return</span> delayer.schedule(command, delay, unit);<br>        &#125;<br><br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DaemonThreadFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ThreadFactory</span> &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Thread <span class="hljs-title function_">newThread</span><span class="hljs-params">(Runnable r)</span> &#123;<br>                <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r);<br>                t.setDaemon(<span class="hljs-literal">true</span>);<br>                t.setName(<span class="hljs-string">&quot;CompletableFutureScheduler&quot;</span>);<br>                <span class="hljs-keyword">return</span> t;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据服务器cpu自定义线程池</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">threadPoolExecutor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<br>            AVALIABLE_PROCESSORS,<br>            <span class="hljs-number">3</span> * AVALIABLE_PROCESSORS,<br>            <span class="hljs-number">3</span>,<br>            TimeUnit.SECONDS,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingDeque</span>&lt;&gt;(<span class="hljs-number">20</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.CallerRunsPolicy()<br>    );<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 有返回值的异步</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> supplier</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  &lt;T&gt; CompletableFuture&lt;T&gt; <span class="hljs-title function_">supplyAsync</span><span class="hljs-params">(Supplier&lt;T&gt; supplier)</span>&#123;<br>        <span class="hljs-keyword">return</span> supplyAsync(TIMEOUT_VALUE,TIMEOUT_UNIT,supplier);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 有返回值的异步 - 可设置超时时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeout</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> unit</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> supplier</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  &lt;T&gt; CompletableFuture&lt;T&gt; <span class="hljs-title function_">supplyAsync</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout, TimeUnit unit,Supplier&lt;T&gt; supplier)</span>&#123;<br>        <span class="hljs-keyword">return</span> CompletableFuture.supplyAsync(supplier, threadPoolExecutor)<br>                .applyToEither(timeoutAfter(timeout,unit), Function.identity())<br>                .exceptionally(throwable -&gt; &#123;<br>                    throwable.printStackTrace();<br>                    log.error(throwable.getMessage());<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 无返回值的异步</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> runnable</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CompletableFuture <span class="hljs-title function_">runAsync</span><span class="hljs-params">(Runnable runnable)</span>&#123;<br>        <span class="hljs-keyword">return</span> runAsync(TIMEOUT_VALUE,TIMEOUT_UNIT,runnable);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 无返回值的异步 - 可设置超时时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> runnable</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CompletableFuture <span class="hljs-title function_">runAsync</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout, TimeUnit unit,Runnable runnable)</span>&#123;<br>        <span class="hljs-keyword">return</span> CompletableFuture.runAsync(runnable,threadPoolExecutor)<br>                .applyToEither(timeoutAfter(timeout,unit), Function.identity())<br>                .exceptionally(throwable -&gt; &#123;<br>                    throwable.printStackTrace();<br>                    log.error(throwable.getMessage());<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 统一处理异步结果</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> futures</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CompletableFuture <span class="hljs-title function_">allOf</span><span class="hljs-params">(CompletableFuture... futures)</span>&#123;<br>        <span class="hljs-keyword">return</span> allOf(TIMEOUT_VALUE,TIMEOUT_UNIT,futures);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 统一处理异步结果 - 可设置超时时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> futures</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CompletableFuture <span class="hljs-title function_">allOf</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout, TimeUnit unit,CompletableFuture... futures)</span>&#123;<br>        <span class="hljs-keyword">return</span> CompletableFuture.allOf(futures)<br>                .applyToEither(timeoutAfter(timeout,unit), Function.identity())<br>                .exceptionally(throwable -&gt; &#123;<br>                    throwable.printStackTrace();<br>                    log.error(throwable.getMessage());<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 异步超时处理</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeout</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> unit</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; CompletableFuture&lt;T&gt; <span class="hljs-title function_">timeoutAfter</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout, TimeUnit unit)</span> &#123;<br>        CompletableFuture&lt;T&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompletableFuture</span>&lt;T&gt;();<br>        <span class="hljs-comment">// timeout 时间后 抛出TimeoutException 类似于sentinel / watcher</span><br>        Delayer.delayer.schedule(() -&gt; result.completeExceptionally(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimeoutException</span>()), timeout, unit);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; CompletableFuture&lt;T&gt; <span class="hljs-title function_">timeoutAfter</span><span class="hljs-params">()</span> &#123;<br>        CompletableFuture&lt;T&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompletableFuture</span>&lt;T&gt;();<br>        <span class="hljs-comment">// timeout 时间后 抛出TimeoutException 类似于sentinel / watcher</span><br>        Delayer.delayer.schedule(() -&gt; result.completeExceptionally(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimeoutException</span>()), TIMEOUT_VALUE, TIMEOUT_UNIT);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>springBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具类</tag>
      
      <tag>springBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea ssm/ssh项目配置Tomcat（极其详细）</title>
    <link href="/2023/04/13/course/tomcat/"/>
    <url>/2023/04/13/course/tomcat/</url>
    
    <content type="html"><![CDATA[<h1 id="idea-ssm-x2F-ssh项目配置Tomcat"><a href="#idea-ssm-x2F-ssh项目配置Tomcat" class="headerlink" title="idea ssm&#x2F;ssh项目配置Tomcat"></a>idea ssm&#x2F;ssh项目配置Tomcat</h1><h3 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h3><ul><li>你的项目</li><li>tomcat压缩包</li></ul><hr></hr><p>tomcat下载地址（8.0-9.0版本）：👉<a href="https://pan.baidu.com/s/12a7C7gJ3tHw_97dH94TJqQ">点我下载</a><br>提取码：<strong>9lYa</strong></p><p><code>如果本地开发，不需要配置tomcat环境变量</code></p><h3 id="2、确保你的项目需要配置tomcat"><a href="#2、确保你的项目需要配置tomcat" class="headerlink" title="2、确保你的项目需要配置tomcat"></a>2、确保你的项目需要配置tomcat</h3><p>如 springboot项目不需要配置tomcat，<strong>ssm&#x2F;ssh&#x2F;servlet项目需要手动配置tomcat</strong></p><h3 id="3、开始配置"><a href="#3、开始配置" class="headerlink" title="3、开始配置"></a>3、开始配置</h3><blockquote><p>这里拿ssm项目为例子</p></blockquote><h4 id="1）解压tomcat包至某一个目录下"><a href="#1）解压tomcat包至某一个目录下" class="headerlink" title="1）解压tomcat包至某一个目录下"></a>1）解压tomcat包至某一个目录下</h4><p><img src="http://static.hootin19.fun/articles/89433c0d1a20f5294d75bb21a9bea4ec.png" alt="图片.png"></p><p><img src="http://static.hootin19.fun/articles/2cd22f39736d6c87b7a61fa703272824.png" alt="图片.png"></p><h4 id="2）idea配置tomcat"><a href="#2）idea配置tomcat" class="headerlink" title="2）idea配置tomcat"></a>2）idea配置tomcat</h4><p><img src="http://static.hootin19.fun/articles/8ca962a46a2899f3c5413360925f7345.png" alt="图片.png"></p><p><code>部分idea版本不同，看到绿色锤子旁边那个就是的，点击这个添加配置</code></p><p><img src="http://static.hootin19.fun/articles/139d0335067d6df7cea48857b133e4bf.png" alt="图片.png"><br><img src="http://static.hootin19.fun/articles/68179478cbc04af89162073363364813.png" alt="图片.png"></p><p><strong>注意idea为社区版的是没有这个选项的，详情请查看<a href="https://www.hootin19.fun/siteresource/68">《idea破解》</a></strong></p><p><img src="http://static.hootin19.fun/articles/a8cf54e8ceef16550cf50614c615dbd2.png" alt="图片.png"></p><p><img src="http://static.hootin19.fun/articles/1cda7f04508c02df95124a987bdfe8c8.png" alt="图片.png"></p><p><img src="http://static.hootin19.fun/articles/42e5d99194bafaf49c31f6fe7c3ede37.png" alt="图片.png"></p><p><img src="http://static.hootin19.fun/articles/a05ff43815a04af2ef032b927a7198b4.png" alt="图片.png"></p><p><img src="http://static.hootin19.fun/articles/d040a5aee5b99c3fa949864f9dc1449c.png" alt="图片.png"></p><h4 id="3）加载项目至tomcat容器"><a href="#3）加载项目至tomcat容器" class="headerlink" title="3）加载项目至tomcat容器"></a>3）加载项目至tomcat容器</h4><p><img src="http://static.hootin19.fun/articles/494b99e0aa82287f6d74b56b48a82ae9.png" alt="图片.png"></p><p><img src="http://static.hootin19.fun/articles/a8aa618aae9e7fe8bbf2812943c1643e.png" alt="图片.png"></p><p><img src="http://static.hootin19.fun/articles/c9954edb5dd39aa39d24fbf1094df420.png" alt="图片.png"></p><p><img src="http://static.hootin19.fun/articles/41777c385c0387849d4c5992fbb49a9e.png" alt="图片.png"></p><p><img src="http://static.hootin19.fun/articles/a5579df749e87e22daa2588eaed30a5a.png" alt="图片.png"></p><p><img src="http://static.hootin19.fun/articles/6226b7770b26500c80e33920f6aef93e.png" alt="图片.png"></p><p><code>点击应用确定，完成项目配置</code></p><p><img src="http://static.hootin19.fun/articles/739b50ed2f776b801eb5c3ffe0a09729.png" alt="图片.png"></p><h2 id="疑难解答"><a href="#疑难解答" class="headerlink" title="疑难解答"></a>疑难解答</h2><h3 id="1、项目没有配置好，tomcat找不到项目？"><a href="#1、项目没有配置好，tomcat找不到项目？" class="headerlink" title="1、项目没有配置好，tomcat找不到项目？"></a>1、项目没有配置好，tomcat找不到项目？</h3><p>1）先确定包结构是否正确，以ssm项目为例</p><p><strong>首先如果是maven项目，一定要先配置好maven，会省很多事</strong></p><p><img src="http://static.hootin19.fun/articles/fe4a56907af6c1bdcc2d2ed11047204c.png" alt="图片.png"></p><p><img src="http://static.hootin19.fun/articles/024251aa0e324f51802b8d8e8a950334.png" alt="图片.png"></p><p><strong>注意：如果resource没有那个黄色的标识，右键标记为资源目录</strong><br><img src="http://static.hootin19.fun/articles/1e8984943f6748004fbe1c8e117567d9.png" alt="图片.png"></p><p>2） F4 打开项目设置</p><p><img src="http://static.hootin19.fun/articles/624d6b37a8bdafb3ad2954877c5f053d.png" alt="图片.png"></p><p>确保该目录下有以下配置</p><p><strong>如果没有的话完成以下步骤</strong><br><img src="http://static.hootin19.fun/articles/48e140041c139f414ca83d630cc58342.png" alt="图片.png"><br><img src="http://static.hootin19.fun/articles/67b1d64cc8cb5b2249ec38c1dc1dace2.png" alt="图片.png"><br><img src="http://static.hootin19.fun/articles/86efa68561eb83db02370c041e856888.png" alt="图片.png"><br><img src="http://static.hootin19.fun/articles/810dc233883d9c43fa4ea35aa902284e.png" alt="图片.png"><br><img src="http://static.hootin19.fun/articles/a45fb270de7c7fa7880015ac87bbc693.png" alt="图片.png"><br><img src="http://static.hootin19.fun/articles/b5135545de2aad060b9c2da1d96027ac.png" alt="图片.png"><br><img src="http://static.hootin19.fun/articles/436816859575bd9a46234735546ff696.png" alt="图片.png"></p><blockquote><p>一般web目录命名为 webapp  web等，不同项目不一样</p></blockquote><p><img src="http://static.hootin19.fun/articles/01a4c179111c663d579cc43ac3eb590c.png" alt="图片.png"></p><p><img src="http://static.hootin19.fun/articles/efec34d18a6f33001482a61e5aa1079c.png" alt="图片.png"><br><img src="http://static.hootin19.fun/articles/e76ae4a7ecdfab84fdfac4036ea0c0cc.png" alt="图片.png"></p><p>最后点击应用保存，项目设置完成</p>]]></content>
    
    
    <categories>
      
      <category>运行教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springBoot</tag>
      
      <tag>运行教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven环境搭建（idea）</title>
    <link href="/2023/04/12/course/maven/"/>
    <url>/2023/04/12/course/maven/</url>
    
    <content type="html"><![CDATA[<h1 id="Maven环境搭建（idea）"><a href="#Maven环境搭建（idea）" class="headerlink" title="Maven环境搭建（idea）"></a>Maven环境搭建（idea）</h1><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p>我用的是maven3.5版本的，已配置好可直接使用，下载地址👇</p><p><a href="https://pan.baidu.com/s/1m8qjck2COEyNr_04LN7Q4w">maven安装包</a><br>提取码：f6qz </p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="1、解压maven压缩包"><a href="#1、解压maven压缩包" class="headerlink" title="1、解压maven压缩包"></a>1、解压maven压缩包</h3><p>解压到本地电脑中任意磁盘（不要放在C盘）</p><p><img src="http://static.hootin19.fun/articles/a271ceeafe3faf7a84db14b3118c31a2.jpg" alt="1663399675605.jpg"></p><p><img src="http://static.hootin19.fun/articles/64d450b313b2d5b98ec9ca4dd52e5d30.jpg" alt="1663399839224.jpg"></p><h3 id="2、创建maven本地仓库的存储路径"><a href="#2、创建maven本地仓库的存储路径" class="headerlink" title="2、创建maven本地仓库的存储路径"></a>2、创建maven本地仓库的存储路径</h3><p>创建一个文件夹，命名为 mavenRespository，用于存放本地jar。</p><p><img src="http://static.hootin19.fun/articles/368817ed297a702bb0695779135afc45.png" alt="图片.png"></p><h3 id="3、修改setting-xml配置文件"><a href="#3、修改setting-xml配置文件" class="headerlink" title="3、修改setting.xml配置文件"></a>3、修改setting.xml配置文件</h3><p><img src="http://static.hootin19.fun/articles/54a9ca77db5c66e3bfb92e3a6fe1dbb2.jpg" alt="1663399990456.jpg"></p><p>👇以下是setting文件内容，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span><br><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>你的maven仓库地址<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>　　　　　<span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>　　　　　<span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>　　　　　<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>　　　　　<span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>　　<span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>将上述代码中的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>你的maven仓库地址<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></td></tr></table></figure><p>标签内容替换成刚才新建 mavenRespository 文件夹目录，<strong>注意换成自己电脑的路径</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>E:\software\maven\mavenRepository<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最后保存文件，maven配置完成</p><h2 id="idea中配置maven"><a href="#idea中配置maven" class="headerlink" title="idea中配置maven"></a>idea中配置maven</h2><p>maven环境配置完成后，现在需要在idea中配置maven</p><h3 id="1、打开idea的设置"><a href="#1、打开idea的设置" class="headerlink" title="1、打开idea的设置"></a>1、打开idea的设置</h3><p><img src="http://static.hootin19.fun/articles/756134d89890d8cfc555db4ac6ca8a0c.png" alt="图片.png"></p><h3 id="2、搜索maven"><a href="#2、搜索maven" class="headerlink" title="2、搜索maven"></a>2、搜索maven</h3><p><img src="http://static.hootin19.fun/articles/3416adf2117adb506d863afd97ab5b16.png" alt="图片.png"></p><h3 id="3、修改maven主目录"><a href="#3、修改maven主目录" class="headerlink" title="3、修改maven主目录"></a>3、修改maven主目录</h3><p><strong>只需要修改下图中的maven主目录即可</strong></p><p><img src="http://static.hootin19.fun/articles/fcfbb189a306787710b59fb93c7ae661.png" alt="图片.png"></p><h3 id="4、-保存后配置完成"><a href="#4、-保存后配置完成" class="headerlink" title="4、 保存后配置完成"></a>4、 保存后配置完成</h3><p>点击保存后，如果打开了maven项目，idea的右下角会有下面的加载条，等待jar下载完成即可</p><p><img src="http://static.hootin19.fun/articles/e555b8685943dcdc4c660a62a4603aba.png" alt="图片.png"></p><p><img src="http://static.hootin19.fun/articles/9e00c423ee816e62d5462c2203a2c56d.png" alt="图片.png"></p>]]></content>
    
    
    <categories>
      
      <category>运行教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springBoot</tag>
      
      <tag>运行教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
